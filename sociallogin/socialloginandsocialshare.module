<?php

/**
 * @file
 * Implement sociallogin support for Drupal
 */
module_load_include('inc', 'socialloginandsocialshare', 'socialloginandsocialshare.user_functions');

/**
 * Implements hook_menu().
 *
 * Responed to url handling for socialloginandsocialshare module.
 */
function socialloginandsocialshare_menu() {
  $items['user/%user/delete'] = array(
    'title' => 'Delete Social Login',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('socialloginandsocialshare_user_delete_form', 1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'file' => 'socialloginandsocialshare.functions.inc',
  );
  $items['admin/config/people/socialloginandsocialshare'] = array(
    'title' => 'Social Login and Social Share',
    'description' => 'Configure settings for LoginRadius Social Login and Social Share',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('socialloginandsocialshare_admin_settings'),
    'access arguments' => array('administer social login'),
    'weight' => -4,
    'file' => 'socialloginandsocialshare.admin.inc',
  );
  $items['admin/config/people/socialloginandsocialshare/settings'] = array(
    'title' => 'Social Login',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('socialloginandsocialshare_admin_settings'),
    'access arguments' => array('administer social login'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'file' => 'socialloginandsocialshare.admin.inc',
  );
  $items['admin/config/people/socialloginandsocialshare/share'] = array(
    'title' => 'Social Sharing',
    'description' => 'socialloginandsocialshare Share settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('socialloginandsocialshare_sharebar_settings_form'),
    'access arguments' => array('administer social login'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'socialloginandsocialshare.admin.inc',
  );
  $items['admin/config/people/socialloginandsocialshare/advancesettings'] = array(
    'title' => 'Advance Settings',
    'description' => 'Advance settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('socialloginandsocialshare_advance_settings_form'),
    'access arguments' => array('administer social login'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
    'file' => 'socialloginandsocialshare.admin.inc',
  );
  $items['admin/config/people/socialloginandsocialshare/help'] = array(
    'title' => 'Help',
    'page callback' => 'socialloginandsocialshare_user_help',
    'access arguments' => array('administer social login'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
    'file' => 'socialloginandsocialshare.admin.inc',
  );
  $items['socialloginandsocialshare/token_handler'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('socialloginandsocialshare_user_register_validate'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_admin_paths().
 *
 * Respond to Define administrative paths.
 */
function socialloginandsocialshare_admin_paths() {
  return array(
    'user/*/socialloginandsocialshare' => TRUE,
    'user/*/socialloginandsocialshare/delete/*' => TRUE,
  );
}

/**
 * Implements hook_permission().
 *
 * Responed to Define user permissions.
 */
function socialloginandsocialshare_permission() {
  return array(
    'administer social login' => array(
      'title' => t('Administer Social Login settings'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_theme().
 * 
 * Respond to show themes (interface, email popup).
 */
function socialloginandsocialshare_theme() {
  $path = drupal_get_path('module', 'socialloginandsocialshare') . '/theme';
  return array(
    'socialloginandsocialshare_popup' => array(
      'variables' => array(
        'popup_params' => NULL,
      ),
      'template' => 'socialloginandsocialshare_popup',
      'path' => $path,
    ),
    'socialloginandsocialshare_links' => array(
      'variables' => array(
        'params' => NULL,
      ),
      'template' => 'socialloginandsocialshare_links',
      'path' => $path,
    ),
    'socialloginandsocialshare_linked' => array(
      'variables' => array(
        'params' => NULL,
      ),
      'template' => 'socialloginandsocialshare_linked',
      'path' => $path,
    ),
  );
}

/**
 * 
 * @param $form
 * @param $form_state
 * @param $form_id
 * @return
 * 
 * Implements hook_form_FORM_ID_form_alter().
 * 
 * Show Social Account Linking interface at user profile page.
 */
function socialloginandsocialshare_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  if (is_null(arg(3)) || arg(3) == 'account') {
    if (variable_get('socialloginandsocialshare_account_linking', '') == 1 && !user_access('administer site configuration')) {
      $identity_title = variable_get('socialloginandsocialshare_identity_label_string');
      $form['socialloginandsocialshare_linked'] = array(
        '#type' => 'item',
        '#title' => '',
        '#markup' => theme('socialloginandsocialshare_linked'),
        '#attributes' => array('class' => array('socialloginandsocialshare_linked')),
        '#prefix' => '<fieldset class="form-wrapper" id="edit-social-linked"><legend><span class="fieldset-legend">' . t($identity_title) . '</span></legend>',
        '#suffix' => '</fieldset>',
        '#weight' => -20,
      );
    }
  }
  
  return $form;
}

/**
 * Implements hook_preprocess.
 * @global $user
 * @param $vars that contains all variables which used in template file.
 * 
 * variables for socialloginandsocialshare_linked.tpl file
 * Show Account Linking interface
 */
function socialloginandsocialshare_preprocess_socialloginandsocialshare_linked(&$vars) {
  global $user;
  
  socialloginandsocialshare_options($vars);
  $result = db_query("SELECT am.aid, authname, provider, provider_id FROM {authmap} am INNER JOIN {socialloginandsocialshare_mapusers} sm ON am.aid = sm.aid WHERE module = :module AND uid = :uid", array(
    ':module' => 'socialloginandsocialshare',
    ':uid' => $user->uid
  ));
  
  foreach ($result as $identity) {
    $vars['providers'][$identity->provider_id] = $identity->provider;
  }
}

/**
 * Implements hook_preprocess.
 * @param $vars
 * 
 * variables for socialloginandsocialshare_links.tpl file
 * Show Social Login interface
 */
function socialloginandsocialshare_preprocess_socialloginandsocialshare_links(&$vars) {
  socialloginandsocialshare_options($vars);
}

/**
 * 
 * @param $vars
 * @param $hook
 * 
 * Implements hook_preprocess_page().
 * Add the LoginRadius Social Login script and Social Share Script.
 */
function socialloginandsocialshare_preprocess_page(&$vars, $hook) {
  if (!user_access('administer site configuration')) {
    $api_key = trim(variable_get('socialloginandsocialshare_apikey'));

    if (!empty($api_key)) {
      drupal_add_js('//hub.loginradius.com/include/js/LoginRadius.js', array(
        'type' => 'external',
        'scope' => 'header',
        'weight' => 5
      ));
      drupal_add_js($GLOBALS['base_url'] . '/' . drupal_get_path('module', 'socialloginandsocialshare') . '/js/LoginRadiusSDK.2.0.0.js', array(
        'type' => 'external',
        'scope' => 'header',
        'weight' => 6
      ));
    }

    if (variable_get('socialloginandsocialshare_enable_horizontal_share') == 1 || variable_get('socialloginandsocialshare_enable_vertical_share') == 1) {
      $share_script_init = "var islrsharing = true; var islrsocialcounter = true; var hybridsharing = true;";
      drupal_add_js($share_script_init, array('type' => 'inline', 'scope' => 'footer', 'weight' => -10));
    }
  }
}

/**
 * @param $form
 * @param $form_state
 * @param $form_id
 * @return mixed
 *
 * Implements hook_form_alter().
 * Respond to disable traditional login form.
 */
function socialloginandsocialshare_form_alter(&$form, $form_state, $form_id) {
  if (variable_get('socialloginandsocialshare_disable_traditional_login') == 1) {
    if ($form_id == 'user_login_block') {
      unset($form['name']);
      unset($form['pass']);
      unset($form['actions']);
      unset($form['links']);
    }

    return $form;
  }
}

/**
 * @param $form
 * @param $form_state
 *
 * Implements hook_form_FORM_ID_form_alter().
 *
 * Add social login interface at commenting form.
 */
function socialloginandsocialshare_form_comment_form_alter(&$form, &$form_state) {
  //add an I agree to house rules checkbox to the form
  if (variable_get('socialloginandsocialshare_commenting_enable') == 1) {
    // add field to comment content type
    if (user_is_logged_in()) {
      return;
    }

    // check if loginradius sent a token to authenticate the user
    socialloginandsocialshare_user_login_form_alter($form);
  }
}

/**
 * Implements hook_help().
 *
 * Respond to Provide online user help links.
 *
 * @param string $path
 *   The router menu path, as defined in hook_menu.
 */
function socialloginandsocialshare_help($path) {
  switch ($path) {
    case 'admin/help#socialloginandsocialshare':
      $loginradius_link = l(t('LoginRadius'), 'http://ish.re/4', array('attributes' => array('target' => '_blank')));
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This social login module is developed by LoginRadius which is a Software As A Service (SaaS).Social Login module enables social login on a Drupal website letting users log in through their existing IDs such as Facebook, Twitter, Google, Yahoo and over 25 more!. Please visit the !loginradius.', array('!loginradius' => $loginradius_link)) . '</p>';
      $header_items = array(
        t('Social login'),
        t('User profile data'),
        t('Social analytics'),
        t('Eliminating registration process'),
        t('Syncronize social login with traditional login'),
      );
      $output .= theme('item_list', array('items' => $header_items, 'title' => t('Use')));
      $items = array(
        l(t('Drupal live demo'), 'http://drupaldemo.loginradius.com/', array('attributes' => array('target' => '_blank'))),
        l(t('Drupal Module Documentation'), 'http://ish.re/AEGE', array('attributes' => array('target' => '_blank'))),
        l(t('LoginRadius'), 'http://ish.re/4', array('attributes' => array('target' => '_blank'))),
        l(t('Developers'), 'http://ish.re/AFGF', array('attributes' => array('target' => '_blank'))),
        l(t('LoginRadius blog'), 'http://ish.re/AEGG', array('attributes' => array('target' => '_blank'))),
        l(t('LoginRadius video'), 'http://ish.re/AEGI', array('attributes' => array('target' => '_blank'))),
      );
      $output .= theme('item_list', array('items' => $items, 'title' => t('Important links')));
      return $output;
  }
}

/**
 * @param $form
 * @param $form_state
 *
 * Implements hook_form_FORM_ID_alter().
 *
 * Respond to altering user login block.
 */
function socialloginandsocialshare_form_user_login_block_alter(&$form, &$form_state) {
  if (variable_get('socialloginandsocialshare_attach_login_form') == 1) {
    socialloginandsocialshare_user_login_form_alter($form);
  }
}

/**
 * @param $form
 * @param $form_state
 *
 * Implements hook_form_FORM_ID_alter() for socialloginandsocialshare_form_user_login_alter().
 *
 * Respond to add a socialloginandsocialshare link on user login form.
 */
function socialloginandsocialshare_form_user_login_alter(&$form, &$form_state) {
  if (variable_get('socialloginandsocialshare_loginpage_position') == 1) {
    socialloginandsocialshare_user_login_form_alter($form);
  }
}

/**
 * @param $form
 * @param $form_state
 *
 * Implements hook_form_FORM_ID_alter().
 *
 * Respond to add a socialloginandsocialshare link on user register form.
 */
function socialloginandsocialshare_form_user_register_form_alter(&$form, &$form_state) {
// Add socialloginandsocialshare link to registration form.
  if (isset($_SESSION['social_lrdata'])) {
    $lrdata = $_SESSION['social_lrdata'];

    if (isset($lrdata['id']) && !empty($lrdata['id'])) {
      $data = socialloginandsocialshare_check_exist_username($lrdata);
      $form['account']['name']['#default_value'] = $data['username'];
      $form['account']['mail']['#default_value'] = $lrdata['email'];

      if (variable_get('user_email_verification', TRUE)) {
        $form['account']['pass']['#type'] = 'hidden';
        $form['account']['pass']['#value'] = user_password();
      }

      $lrdata['gender'] = !empty($lrdata['gender']) ? socialloginandsocialshare_get_gender($lrdata['gender']) : '';
      $form = socialloginandsocialshare_show_profile_field_to_register_form($form, $lrdata);
    }
  }
  
  //Add Social Login Interface at Register page.
  if (variable_get('socialloginandsocialshare_registerpage_position') == 1) {
    socialloginandsocialshare_user_login_form_alter($form);
  }
}

/**
 * @param $edit
 * @param $account
 * @param $category
 *
 * Implements hook_user_insert();
 * Insert user data when New user register via traditional social login.
 */
function socialloginandsocialshare_user_insert(&$edit, $account, $category) {
  if (isset($_SESSION['social_lrdata'])) {
    $lrdata = $_SESSION['social_lrdata'];
    unset($_SESSION['social_lrdata']);

    if (variable_get('user_pictures') == 1 && !empty($lrdata['thumbnail'])) {
      socialloginandsocialshare_insert_picture($lrdata, $account);
    }
    db_delete('authmap')
        ->condition('authname', $lrdata['id'])
        ->execute();
    user_set_authmaps($account, array('authname_socialloginandsocialshare' => $lrdata['id']));
    $aid = db_query('SELECT aid FROM {authmap} WHERE authname = :id', array('id' => $lrdata['id']))->fetchField();
    socialloginandsocialshare_insert_into_mapping_table($aid, $lrdata['provider'], $lrdata['id']);
  }
}

/**
 * @param $account
 *
 * Implements hook_user_delete()
 * Function that insert social user picture.
 */
function socialloginandsocialshare_user_delete($account) {
  $aid = db_query('SELECT aid FROM {authmap} WHERE uid = :id', array('id' => $account->uid))->fetchField();
  db_delete('socialloginandsocialshare_mapusers')
      ->condition('aid', $aid)
      ->execute();
}

/**
 * @param $key
 * @param $message
 * @param $params
 *
 * Implements hook_mail()
 */
function socialloginandsocialshare_mail($key, &$message, $params) {
  $language = $message['language'];
  $variables = array('user' => $params['account'], 'pass' => isset($params['pass']) ? $params['pass'] : '');
  
  switch ($key) {
    case 'newuser':
      $message['subject'] = socialloginandsocialshare_mail_text($key . '_subject', $language, $variables);
      $message['body'][] = socialloginandsocialshare_mail_text($key . '_body', $language, $variables);
      break;
  }
}

/**
 * Implements hook_block_info().
 */
function socialloginandsocialshare_block_info() {
  $blocks['login'] = array(
    'info' => t('Social login'),
  );
  return $blocks;
}

/**
 * @param $delta
 * @return array
 *
 * Implements hook_block_view().
 */
function socialloginandsocialshare_block_view($delta) {
  $block = array();
  
  if (user_is_logged_in()) {
    $block['content'] = "";
  }
  else {
    $block['content'] = theme('socialloginandsocialshare_links');
  }
  
  return $block;
}

/**
 * @param $form
 * @param $form_state
 * @return mixed
 *
 * Function that process login functionality.
 */
function socialloginandsocialshare_user_register_validate($form, &$form_state) {
  global $user;
  
  if (!user_is_logged_in()) {
    if (isset($_SESSION['current_social_provider'])) {
      unset($_SESSION['current_social_provider']);
    }

    // Get socialloginandsocialshare variable.
    // Fetch data from submitted.
    if (isset($_POST['socialloginandsocialshare_emailclick'])) {
      if (isset($_SESSION['lrdata']) && !empty($_SESSION['lrdata'])) {
        $lrdata = $_SESSION['lrdata'];
        $lrdata['email'] = trim($_POST['email']);

        //Call the email popup when email address is wrong.
        if (!valid_email_address($lrdata['email'])) {
          $popup_params = array('msgtype' => 'warning', 'provider' => $lrdata['provider']);
          $popup_params['msg'] = t("This email is invalid. Please choose another one.");

          if (empty($lrdata['email'])) {
            $popup_params['msg'] = t("Email is required.");
          }

          $form['socialloginandsocialshare_popup'] = socialloginandsocialshare_get_form_element_to_show_email_popup($popup_params);
          return $form;
        }
        else {
          $check_mail = user_load_by_mail($lrdata['email']);

          if (!empty($check_mail)) {
            $email_wrong = variable_get('socialloginandsocialshare_emailrequired_popup_wrong');
            $popup_params = array('msg' => t($email_wrong), 'msgtype' => 'warning', 'provider' => $lrdata['provider']);
            $form['socialloginandsocialshare_popup'] = socialloginandsocialshare_get_form_element_to_show_email_popup($popup_params);
            return $form;
          }
          else {
            variable_set('user_verify', 1);
            $lrdata = $_SESSION['lrdata'];
            unset($_SESSION['lrdata']);
            $lrdata['email'] = trim($_POST['email']);
            socialloginandsocialshare_adduser($lrdata, $form, $form_state);
          }
        }
      }
    }
    elseif (isset($_POST['socialloginandsocialshare_emailclick_cancel'])) {
      unset($_SESSION['lrdata']);
      drupal_goto();
    }

    if (!isset($_POST['token'])) {
      return;
    }
    
    $obj = new LoginRadius();
    $userprofile = $obj->loginradius_get_user_profiledata($_POST['token']);
    
    if (isset($userprofile->ID) && $userprofile->ID != '' && !user_is_logged_in()) {
      $lrdata = socialloginandsocialshare_getuser_data($userprofile);
      variable_set('user_verify', 0);
      socialloginandsocialshare_check_existing_user($lrdata, $form, $form_state);

      if (variable_get('socialloginandsocialshare_email_required', '') == 1 && empty($lrdata['email'])) {
        $account = user_external_load($lrdata['id']);

        if (isset($account->uid)) {
          socialloginandsocialshare_provide_login_to_unblock_user($account, $lrdata, $form, $form_state);
        }
        else {
          socialloginandsocialshare_enable_force_registration($lrdata);
          $_SESSION['lrdata'] = $lrdata;
          $text_emailpoup = variable_get('socialloginandsocialshare_emailrequired_popup_text');
          $popup_params = array('msg' => t($text_emailpoup, array('@provider' => t($lrdata['provider']))), 'msgtype' => 'status', 'provider' => $lrdata['provider']);
          $form['socialloginandsocialshare_popup'] = socialloginandsocialshare_get_form_element_to_show_email_popup($popup_params);
          return $form;
        }
      }
    }
    elseif (!user_is_logged_in()) {
      socialloginandsocialshare_show_error_message($userprofile);
    }
  }
  elseif (isset($_POST['token'])) {
    socialloginandsocialshare_user_identities_submit($form, $user, $_POST['token']);
  }
}
